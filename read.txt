stworzenie kontenera
docker run -d -p 27017:27017 --name kolokwium mongo:latest

odpalenie kontenera
docker exec -it test-mongo bash

utworzenie nowej kolekcji
use nazwa

dodanie dokumentow
db.nazwa.insertMany(json)

pobranie zipa z jsonem
wget link .

odpakowanie zipa
unzip

instalowanie (if needed)
apt install aplikacja (unzip i wget napewno mysle)

import jsona (z powloki bashowej)
mongoimport --uri="mongodb://localhost:27017/your_database_name" --collection=your_collection_name --file=your_file.json --jsonArray

import csv (z powloki bashowej)
mongoimport --uri="mongodb://localhost:27017/your_database_name" --collection=your_collection_name --type=csv --headerline --file=your_file.csv

export jsona (z powloki bashowej)
mongoexport --uri="mongodb://localhost:27017/testdb" --collection=restaurants --out=restaurants.json --jsonArray
opcje:
--uri: Specifies the MongoDB connection string.
--collection: Specifies the collection to export.
--out: Specifies the output file name.
--type: Specifies the output file type (json or csv).
--fields: Specifies the fields to include in the export.
--query: Specifies a query to filter the documents to export.
--sort: Specifies the sort order of the documents.
--limit: Limits the number of documents to export.

mongoshowe komendy:

show dbs;

use your_database_name;

show collections;

db.createCollection("new_collection");

db.collection_name.drop();


db.collection_name.insertOne({
  "name": "John Doe",
  "age": 30,
  "city": "New York"
});

db.collection_name.insertMany([
  { "name": "Alice", "age": 25, "city": "Los Angeles" },
  { "name": "Bob", "age": 28, "city": "Chicago" }
]);

db.collection_name.find(); - all documents

db.collection_name.find({ "city": "New York" }); - only in new york

db.restaurants.find({
  $or: [
    { borough: "Bronx" },
    { borough: "Manhattan" }
  ]
});

db.restaurants.find({ 
  borough: { $nin: ["Manhattan", "Bronx"] }  - nin = not in
});


db.collection_name.findOne({ "name": "Alice" });

db.collection_name.find({ "city": "New York" }, { "name": 1, "age": 1, "_id": 0 }); - only in new york, will project only name and age

db.collection_name.find().sort({ "age": 1 }); // 1 for ascending, -1 for descending

db.collection_name.find().limit(5);

db.collection_name.countDocuments({ "city": "New York" });

db.collection_name.updateOne(
  { "name": "John Doe" },
  { $set: { "age": 31 } }
);

db.collection_name.updateOne(
  { "name": "John Doe" },
  { $set: { "age": 31 } }
);

db.collection_name.replaceOne(
  { "name": "John Doe" },
  { "name": "John Doe", "age": 32, "city": "San Francisco" }
);

db.collection_name.deleteOne({ "name": "Alice" });

db.collection_name.deleteMany({ "city": "NYC" });

db.collection_name.find({ "name": { $regex: "gi", $options: "i" } });


AGREGACJA

$match:
Filters the documents to pass only those that match the specified condition(s).

db.collection_name.aggregate([
  { $match: { "field": "value" } }
]);

$group:
Groups input documents by a specified identifier expression and applies the accumulator expressions.

db.collection_name.aggregate([
  { $group: { _id: "$field", total: { $sum: 1 } } }
]);

$project:
Reshapes each document in the stream by including, excluding, or adding new fields.

db.collection_name.aggregate([
  { $project: { "field1": 1, "field2": 1, "newField": { $concat: ["$field1", " ", "$field2"] } } }
]);

$sort:
Sorts all input documents and returns them in the specified order.

db.collection_name.aggregate([
  { $sort: { "field": 1 } } // 1 for ascending, -1 for descending
]);

$limit:
Limits the number of documents passed to the next stage in the pipeline.

db.collection_name.aggregate([
  { $limit: 5 }
]);

$skip:
Skips over the specified number of documents.

db.collection_name.aggregate([
  { $skip: 5 }
]);

$unwind:
Deconstructs an array field from the input documents to output a document for each element.

db.collection_name.aggregate([
  { $unwind: "$arrayField" }
]);

Example Aggregation Pipelines

Calculate Total Number of Documents per Group

db.collection_name.aggregate([
  { $match: { "status": "active" } },
  { $group: { _id: "$category", total: { $sum: 1 } } }
]);

Calculate Average Score per Group

db.collection_name.aggregate([
  { $group: { _id: "$category", averageScore: { $avg: "$score" } } }
]);

Filter, Group, and Sort

db.collection_name.aggregate([
  { $match: { "status": "active" } },
  { $group: { _id: "$category", totalSales: { $sum: "$sales" } } },
  { $sort: { totalSales: -1 } },
  { $limit: 10 }
]);

Project New Fields

db.collection_name.aggregate([
  { $project: { fullName: { $concat: ["$firstName", " ", "$lastName"] }, birthYear: { $year: "$birthdate" } } }
]);

Example: Combining Multiple Stages

db.collection_name.aggregate([
  { $match: { "status": "active" } },
  { $unwind: "$items" },
  { $group: { _id: "$category", totalSales: { $sum: "$items.price" } } },
  { $sort: { totalSales: -1 } },
  { $project: { _id: 0, category: "$_id", totalSales: 1 } },
  { $limit: 5 }
]);
this:
1. Matches documents with status set to "active".
2. Unwinds the items array field.
3. Groups by category and sums up the items.price.
4. Sorts the results by totalSales in descending order.
5. Projects the final shape of the documents to include category and totalSales.
6. Limits the result to 5 documents.
